extends Area

const ROTATE_SPEED = 4
const DROP_SPEED: float = 4.0

var momentum: float = 0.0

onready var powerUpParticles = preload("res://Scenes/PowerUpCollectionParticle.tscn")
onready var explosion = preload("res://Scenes/Explosion.tscn")
onready var flyOutlabel = preload("res://Scenes/FlyoutLabel.tscn")

enum TYPE {
	EXTRA_SHOT,
	FIRE_RATE_INCREASE,
	EXTRA_LIFE,
	SMART_BOMB,
	DOUBLE_SHOT,
	TRIPLE_SHOT,
	#INVINCIBILITY
}

var powerUpText:Array = [
	"EXTRA SHOT",
	"FIRE RATE BOOST",
	"EXTRA LIFE",
	"SMART BOMB",
	"DOUBLE SHOT",
	"TRIPLE SHOT",
	#"INVINCIBILITY"
]
var type: int = -1

onready var playerCollisionShape = get_node("/root/GameWorld/Player/CollisionShape")

func _ready() -> void:
	pass


func _process(delta: float) -> void:
	rotate_y(delta * ROTATE_SPEED)
	momentum = lerp(momentum, DROP_SPEED, delta / 3)
	if (State.gameState == State.STATE_PLAYING && playerCollisionShape.disabled == false && is_in_group("PowerUps")):
		translate(Vector3(0, -momentum * delta, 0))
	if global_translation.y < -5:
		self.queue_free()

func init(_type = -1):
	if _type == -1:
		queue_free()
	type = _type
	match type:
		TYPE.DOUBLE_SHOT:
			$Meshes/powerup_doubleshot.visible = true
		TYPE.TRIPLE_SHOT:
			$Meshes/powerup_tripleshot.visible = true
		TYPE.FIRE_RATE_INCREASE:
			$Meshes/powerup_firerateincrease.visible = true
		TYPE.EXTRA_LIFE:
			$Meshes/powerup_extralife.visible = true
		TYPE.SMART_BOMB:
			$Meshes/powerup_smartbomb.visible = true


func _on_PowerUp_area_shape_entered(area_rid: RID, area: Area, area_shape_index: int, local_shape_index: int) -> void:
	if State.gameState != State.STATE_PLAYING:
		return
	var groups = area.get_groups()
	var collidedWith = area
	if collidedWith:
		var colliderGroups = collidedWith.get_groups()
		if colliderGroups.has("Player") || colliderGroups.has("RescuedShip"):
			var explosionInstance = explosion.instance()
			get_node("/root/GameWorld").add_child(explosionInstance)
			explosionInstance.init(collidedWith.global_translation, 30, 0.6, 0.7, "PowerUp")
			var particleInstance = powerUpParticles.instance()
			particleInstance.text = powerUpText[type]
			get_node("/root/GameWorld/Player").add_child(particleInstance)
			self.queue_free()
			#Sound generated by Explosion instance.
			applyPower()

func applyPower():
	match type:
		TYPE.DOUBLE_SHOT:
			State.player.lazerLevel = 2
		TYPE.TRIPLE_SHOT:
			State.player.lazerLevel = 3
		TYPE.FIRE_RATE_INCREASE:
			State.player.fireRateIncreased = true
		TYPE.EXTRA_LIFE:
			State.player.lives = State.player.lives + 1
		TYPE.SMART_BOMB:
			smartBomb()

func smartBomb():
	var aliens = get_tree().get_nodes_in_group("Invaders")
	for alien in aliens:
		alien = alien.get_parent()
		alien.lives -= 10
		var explosionInstance = explosion.instance()
	
		if alien.lives < 1 :
			get_node("/root/GameWorld").add_child(explosionInstance)
			var overridecolor = alien.get("explosionColor")
			if overridecolor:
				explosionInstance.overrideColor = overridecolor
			explosionInstance.init(
				alien.global_translation,
				40,
				1,
				alien.get_node("Area/Mesh").scale.x * 2,
				"Invaders"
			)
			State.score += alien.scoreValue
			var flyOutInstance = flyOutlabel.instance()
			flyOutInstance.init(str(alien.scoreValue), alien.global_translation)
			get_node("/root/GameWorld").add_child(flyOutInstance)
			alien.queue_free()
		else:
			get_node("/root/GameWorld").add_child(explosionInstance)
			explosionInstance.init(alien.global_translation, 6, 1, 0.1, "Invaders")
	
		
		
		
